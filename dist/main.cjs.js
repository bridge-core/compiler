"use strict";let e;async function t(a,r,n){let i=await e.readdir(a,{withFileTypes:!0});return await Promise.all(i.map((async i=>{i.isFile()?await n(e.join(a,i.name),e.join(r,i.name)):await t(e.join(a,i.name),e.join(r,i.name),n)}))),[]}function a(e,t,r,n){r.add(e);for(let i of e.dependencies){if("string"==typeof i){const e=n.get(i);if(!e)throw new Error(`Undefined lookup in key registry: "${i}"`);i=e}if(!t.has(i)){if(r.has(i))throw new Error("Circular dependency detected!");a(i,t,r,n)}}t.add(e),r.delete(e)}function r(e,t){let r=new Set;return e.forEach((e=>{r.has(e)||a(e,r,new Set,t)})),r}function n(e,t){var a;return null!==(a=t.find((t=>!t.match||function(e,t){return"string"==typeof e?e.startsWith("RP/")||e.startsWith("BP/")?t.matchPath.startsWith(e):t.relPath.startsWith(e):e(t)}(t.match,e))))&&void 0!==a?a:{}}async function i(t,a,r,i,o,s=!1,l,c){const d=function(t,a,r=!1){let n,i,o=new Set;return{get isRpFile(){return r},get absPath(){return t},get relPath(){return a},get matchPath(){return e.join(r?"RP":"BP",a.replace(/\\/g,"/"))},get dependencies(){return o},get fileContent(){return n},set fileContent(e){n=e},get savePath(){return i},set savePath(e){i=e},add(e){o.add(e)},remove(e){o.delete(e)}}}(t,a,s);d.fileContent=await e.readFile(d.absPath),d.savePath=e.join(d.isRpFile?c:l,d.relPath),r.set(t,d);const u=function(e,t){var a;return null!==(a=n(e,t).plugins)&&void 0!==a?a:[]}(d,o);await Promise.all(u.map((async e=>{var t;const a=await(null===(t=e.afterRead)||void 0===t?void 0:t.call(e,d));a&&(d.fileContent=a)}))),await Promise.all(u.map((e=>{var t;return null===(t=e.resolveDependencies)||void 0===t?void 0:t.call(e,d,i)})))}async function o({bp:a,obp:o,rp:s,orp:l,resolve:c},d){var u,f,h;!function(t){e=t}(d),await Promise.all([e.rmdir(o,{recursive:!0}),e.rmdir(l,{recursive:!0})]),await Promise.all([e.mkdir(o,{recursive:!0}),e.mkdir(l,{recursive:!0})]).catch((()=>{}));const v=new Map,w=new Map;await t(a,".",((e,t)=>i(e,t,v,w,c,!1,o,l))),await t(s,".",((e,t)=>i(e,t,v,w,c,!0,o,l)));const m=[...r(v,w)];for(const t of m){const a=n(t,c),r=null!==(u=a.plugins)&&void 0!==u?u:[];if(0!==r.length||a.doNotTransfer){for(const e of r){const a=await(null===(f=e.transform)||void 0===f?void 0:f.call(e,t));a&&(t.fileContent=a)}for(const e of r.reverse()){const a=await(null===(h=e.afterTransform)||void 0===h?void 0:h.call(e,t));a&&(t.fileContent=a)}if(!a.doNotTransfer){try{await e.mkdir(e.dirname(t.savePath),{recursive:!0})}catch{}await e.writeFile(t.savePath,t.fileContent)}}else{try{await e.mkdir(e.dirname(t.savePath),{recursive:!0})}catch{}await e.copyFile(t.absPath,t.savePath)}}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.buildAddOn=o;
