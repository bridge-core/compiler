#!/usr/bin/env node
import e from"yargs";import{promises as i}from"fs";import{join as t,dirname as n}from"path";async function r(e,n,a){let o=await i.readdir(e,{withFileTypes:!0});return await Promise.all(o.map((async i=>{i.isFile()?await a(t(e,i.name),t(n,i.name)):await r(t(e,i.name),t(n,i.name),a)}))),[]}var a=[{id:"custom_component",includes:"components/",rp_definition:!1},{id:"manifest_bp",includes:"manifest.json",file_viewer:"json",start_state:"manifest/main",rp_definition:!1},{id:"animation",includes:"animations/",file_viewer:"json",build_array_exceptions:["timeline"],documentation:"Entity%20Events",start_state:"animation/main",lightning_cache:"animation",highlighter:"animation",file_creator:"animation"},{id:"animation_controller",includes:"animation_controllers/",file_viewer:"json",documentation:"Entity%20Events",start_state:"animation_controller/main",lightning_cache:"animation_controller",highlighter:"animation_controller",file_creator:"animation_controller"},{id:"biome",includes:"biomes/",file_viewer:"json",documentation:"Biomes",start_state:"biome/main",lightning_cache:"biome",highlighter:"biome",file_creator:"biome"},{id:"block",includes:"blocks/",file_viewer:"json",documentation:"Blocks",start_state:"block/main",lightning_cache:"block",highlighter:"block",file_creator:"block"},{id:"entity",includes:"entities/",file_viewer:"json",player:"entity",documentation:{base:"Entities",inject:"custom_entity"},start_state:"entity/main",lightning_cache:"entity",highlighter:"entity",file_creator:"entity",snippets:"entity"},{id:"feature",includes:"features/",file_viewer:"json",start_state:"feature/main",lightning_cache:"feature",highlighter:"feature",file_creator:"feature"},{id:"feature_rule",includes:"feature_rules/",file_viewer:"json",start_state:"feature_rule/main",lightning_cache:"feature",highlighter:"feature_rule",file_creator:"feature_rule"},{id:"function_tick",includes:"functions/tick.json",file_viewer:"json",start_state:"simple/tick"},{id:"function",includes:"functions/",file_viewer:"text",comment_character:"#",start_state:"function/main",language:"mcfunction.js",file_creator:"function"},{id:"item",includes:"items/",file_viewer:"json",documentation:{base:"Item",inject:"custom_item"},start_state:"item/main",lightning_cache:"item",highlighter:"item",file_creator:"item"},{id:"lang_def",includes:"texts/languages.json",file_viewer:"json",start_state:"simple/lang_def",comment_character:"//"},{id:"lang",includes:"texts/",file_viewer:"text",language:"lang.js",file_creator:"lang",comment_character:"##"},{id:"loot_table",includes:"loot_tables/",file_viewer:"json",start_state:"loot_table/main",highlighter:"loot_table",file_creator:"loot_table"},{id:"molang",includes:"molang/",text_separators:["."],documentation:"MoLang",start_state:"molang/main",language:"molang.js"},{id:"recipe",includes:"recipes/",file_viewer:"json",build_array_exceptions:["key"],documentation:"Recipes",start_state:"recipe/main",highlighter:"recipe",lightning_cache:"recipe",file_creator:"recipe"},{id:"script",includes:"scripts/",file_viewer:"text",documentation:"Scripting",file_creator:"script"},{id:"spawn_rule",includes:"spawn_rules/",file_viewer:"json",documentation:{base:"Entities",extend:"Spawn Rules"},start_state:"spawn_rule/main",highlighter:"spawn_rule",file_creator:"spawn_rule"},{id:"mcstructure",includes:"structures/",file_viewer:"mcstructure"},{id:"trade_table",includes:"trading/",file_viewer:"json",start_state:"trade_table/main",highlighter:"trade_table",file_creator:"trade_table"},{id:"manifest_rp",includes:"manifest.json",file_viewer:"json",start_state:"manifest/main",rp_definition:!0},{id:"entity_model",includes:"models/entity",file_viewer:"model",player:"model",rp_definition:!0,lightning_cache:"model"},{id:"entity_model",includes:"models/mobs.json",file_viewer:"model",player:"model",rp_definition:!0,lightning_cache:"model"},{id:"rp_animation",includes:"animations/",file_viewer:"json",rp_definition:!0,build_array_exceptions:["particle_effects","rotation","position","scale"],start_state:"animation/rp_main",lightning_cache:"rp_animation",highlighter:"animation",file_creator:"rp_animation"},{id:"rp_animation_controller",includes:"animation_controllers/",file_viewer:"json",rp_definition:!0,build_array_exceptions:["remap_curve"],start_state:"animation_controller/rp_main",lightning_cache:"rp_animation_controller",highlighter:"animation_controller",file_creator:"rp_animation_controller"},{id:"attachable",includes:"attachables/",file_viewer:"json",rp_definition:!0,start_state:"attachable/main",lightning_cache:"attachable",highlighter:"entity",file_creator:"attachable"},{id:"client_entity",includes:"entity/",file_viewer:"json",player:"client_entity",rp_definition:!0,documentation:{base:"Entities",extend:"Client Entity Documentation"},start_state:"client_entity/main",lightning_cache:"client_entity",highlighter:"entity",file_creator:"client_entity"},{id:"client_item",target_version:"$project_target_version < 1.16.100",includes:"items/",file_viewer:"json",rp_definition:!0,start_state:"client_item/main",highlighter:"item",file_creator:"client_item"},{id:"client_lang_def",includes:"texts/languages.json",file_viewer:"json",start_state:"simple/lang_def",comment_character:"//",rp_definition:!0},{id:"client_lang",includes:"texts/",file_viewer:"text",file_creator:"lang",comment_character:"##",rp_definition:!0},{id:"fog",includes:"fogs/",file_viewer:"json",start_state:"fog/main",lightning_cache:"fog",highlighter:"fog",file_creator:"fog",rp_definition:!0},{id:"particle",includes:"particles/",file_viewer:"json",player:"particle",rp_definition:!0,start_state:"particle/main",lightning_cache:"particle",highlighter:"particle",file_creator:"particle"},{id:"render_controller",includes:"render_controllers/",file_viewer:"json",rp_definition:!0,build_array_exceptions:["timeline","gradient"],start_state:"render_controller/main",lightning_cache:"render_controller",file_creator:"render_controller",highlighter:"render_controller"},{id:"item_texture",includes:"textures/item_texture.json",file_viewer:"json",start_state:"simple/item_texture",rp_definition:!0},{id:"client_block",includes:"blocks.json",file_viewer:"json",start_state:"simple/blocks",rp_definition:!0},{id:"terrain_texture",includes:"textures/terrain_texture.json",file_viewer:"json",start_state:"simple/terrain_texture",rp_definition:!0},{id:"flipbook_texture",includes:"textures/flipbook_textures.json",file_viewer:"json",start_state:"simple/flipbook_textures",rp_definition:!0},{id:"client_biome",includes:"biomes_client.json",file_viewer:"json",start_state:"simple/biomes_client",rp_definition:!0},{id:"sound_definition",includes:"sounds/sound_definitions.json",file_viewer:"json",start_state:"simple/sound_definitions",lightning_cache:"sound_definition",rp_definition:!0},{id:"client_sound",includes:"sounds.json",file_viewer:"json",start_state:"simple/sounds",rp_definition:!0}];function o(e,i,t,n){t.add(e);for(let r of e.dependencies){if("string"==typeof r){const e=n.get(r);if(!e)throw new Error(`Undefined lookup in key registry: "${r}"`);r=e}if(!i.has(r)){if(t.has(r))throw new Error("Circular dependency detected!");o(r,i,t,n)}}i.add(e),t.delete(e)}function l(e,i){let t=new Set;return e.forEach((e=>{t.has(e)||o(e,t,new Set,i)})),t}function s(e,i,t=!1){var n;return null!==(n=i[function(e,i=!1){e=e.replace(/\\/g,"/");for(const{id:t,rp_definition:n,includes:r}of a)if(!!n!=!i&&e.startsWith(r))return null!=t?t:"unknown";return"unknown"}(e,t)])&&void 0!==n?n:{}}async function c(e,t,n,r,a,o=!1){const l=function(e,i,t=!1){var n;return null!==(n=s(e,i,t).plugins)&&void 0!==n?n:[]}(t,a,o),c=function(e,i,t=!1){let n,r=new Set;return{get isRpFile(){return t},get absPath(){return e},get relPath(){return i},get dependencies(){return r},get fileContent(){return n},set fileContent(e){n=e},add(e){r.add(e)},remove(e){r.delete(e)}}}(e,t,o);c.fileContent=await i.readFile(c.absPath),n.set(e,c),await Promise.all(l.map((async e=>{var i;const t=await(null===(i=e.afterRead)||void 0===i?void 0:i.call(e,c));t&&(c.fileContent=t)}))),await Promise.all(l.map((e=>{var i;return null===(i=e.resolveDependencies)||void 0===i?void 0:i.call(e,c,r)})))}!async function({bp:e,obp:a,rp:o,orp:_,resolve:d}){var f,u,m;await Promise.all([i.mkdir(a,{recursive:!0}),i.mkdir(_,{recursive:!0})]).catch((()=>{}));const p=new Map,g=new Map;await r(e,".",((e,i)=>c(e,i,p,g,d))),await r(o,".",((e,i)=>c(e,i,p,g,d,!0)));const h=[...l(p,g)];console.log(h.map((e=>e.relPath)));for(const e of h){const r=s(e.relPath,d,e.isRpFile),o=null!==(f=r.plugins)&&void 0!==f?f:[];if(0!==o.length||r.doNotTransfer){for(const i of o){const t=await(null===(u=i.transform)||void 0===u?void 0:u.call(i,e));t&&(e.fileContent=t)}for(const i of o.reverse()){const t=await(null===(m=i.afterTransform)||void 0===m?void 0:m.call(i,e));t&&(e.fileContent=t)}if(!r.doNotTransfer){const r=t(e.isRpFile?_:a,e.relPath);try{await i.mkdir(n(r),{recursive:!0})}catch(e){}await i.writeFile(r,e.fileContent)}}else{const r=t(e.isRpFile?_:a,e.relPath);try{await i.mkdir(n(r),{recursive:!0})}catch(e){}await i.copyFile(e.absPath,r)}}}(e.config("config","Run bridge-compiler with the given config",(e=>require(e))).usage("Usage: bridge-compiler --config <path>").option("bp",{describe:"Path to your behavior pack",type:"string",demandOption:!0}).option("obp",{alias:"outputbp",describe:"Where to save the compiled behavior pack",type:"string",demandOption:!0}).option("rp",{describe:"Path to your resource pack",type:"string",demandOption:!0}).option("orp",{alias:"outputrp",describe:"Where to save the compiled resource pack",type:"string",demandOption:!0}).argv);
